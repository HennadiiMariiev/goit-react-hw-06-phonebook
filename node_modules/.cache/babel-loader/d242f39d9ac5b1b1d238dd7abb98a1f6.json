{"ast":null,"code":"var _jsxFileName = \"/home/hennadiy/Documents/Projects/goit-react-hw-06-phonebook/src/App.js\";\nimport { useState, useEffect } from 'react';\nimport Form from './components/Form/Form';\nimport Contacts from './components/Contacts/Contacts';\nimport Filter from './components/Filter/Filter';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { v4 as uuidv4 } from 'uuid';\nimport { StyledApp, StyledBanner } from './components/AppComponents/AppComponents';\nimport { connect } from 'react-redux';\nimport * as itemsActions from './redux/items/items-actions';\nimport * as filterActions from './redux/filter/filter-actions';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App({\n  addNewContact,\n  removeSingleContact,\n  removeAllContacts,\n  state\n}) {\n  // const [contacts, setContacts] = useState([]);\n  // const [filter, setFilter] = useState('');\n  //#region class methods\n  // useEffect(() => {\n  //   const contactsFromLocalStorage = JSON.parse(localStorage.getItem('contacts'));\n  //   // if (contactsFromLocalStorage) {\n  //   //   setContacts([...contactsFromLocalStorage]);\n  //   // }\n  // }, []);\n  // useEffect(() => {\n  //   localStorage.setItem('contacts', JSON.stringify(items));\n  // }, [items]);\n  // const isNameInContacts = (searchName) => {\n  //   return contacts.find(({ name }) => name === searchName);\n  // };\n  // const isContactAdded = (bool) => bool;\n  // const addContact = (name, number) => {\n  //   if (isNameInContacts(name)) {\n  //     const existContactMessage = (name) => toast.warn(`There is an existing contact with name \"${name}\"!`);\n  //     existContactMessage(name);\n  //     return isContactAdded(false);\n  //   }\n  //   const id = uuidv4();\n  //   setContacts([...contacts, { id, name, number }]);\n  //   const addedContactMessage = (name) => toast.success(`New contact \"${name}\" was added!`);\n  //   addedContactMessage(name);\n  //   return isContactAdded(true);\n  // };\n  // const deleteContact = (event) => {\n  //   const id = event.target.value;\n  //   setFilter('');\n  //   setContacts((contacts) => contacts.filter((contact) => contact.id !== id));\n  // };\n  // const filterContacts = () => {\n  //   if (filter === '') {\n  //     return contacts;\n  //   }\n  //   const searchStr = filter.toLowerCase();\n  //   return contacts.filter((contact) => contact.name.toLowerCase().includes(searchStr));\n  // };\n  //       /* onFilterChange= {(e) => setFilter(e.target.value)} */\n  //disabled={items.length ? false : true}\n  //#endregion\n  console.log('state ', state);\n  return /*#__PURE__*/_jsxDEV(StyledApp, {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      onNewContactAdd: addNewContact\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Filter, {\n      value: filter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\n\nconst mapStateToProps = state => ({\n  contacts: {\n    items: state.items,\n    filter: state.filter\n  }\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addNewContact: contact => dispatch(itemsActions.ADD(contact)),\n    removeSingleContact: contact => dispatch(itemsActions.REMOVE(contact)),\n    removeAllContacts: () => dispatch(itemsActions.REMOVE_ALL()),\n    clearFilter: () => dispatch(filterActions.CLEAR()),\n    setFilter: text => dispatch(filterActions.SET(text))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/hennadiy/Documents/Projects/goit-react-hw-06-phonebook/src/App.js"],"names":["useState","useEffect","Form","Contacts","Filter","ToastContainer","toast","v4","uuidv4","StyledApp","StyledBanner","connect","itemsActions","filterActions","App","addNewContact","removeSingleContact","removeAllContacts","state","console","log","filter","mapStateToProps","contacts","items","mapDispatchToProps","dispatch","contact","ADD","REMOVE","REMOVE_ALL","clearFilter","CLEAR","setFilter","text","SET"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,gBAAtC;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,0CAAxC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,YAAZ,MAA8B,6BAA9B;AACA,OAAO,KAAKC,aAAZ,MAA+B,+BAA/B;AAEA,OAAO,uCAAP;;;AAEA,SAASC,GAAT,CAAa;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,mBAAjB;AAAsCC,EAAAA,iBAAtC;AAAyDC,EAAAA;AAAzD,CAAb,EAA+E;AAC7E;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,KAAtB;AAEA,sBACE,QAAC,SAAD;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,eAAe,EAAEH;AAAvB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAEM;AAAf;AAAA;AAAA;AAAA;AAAA,YAFF,eASE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;KA9EQP,G;;AAgFT,MAAMQ,eAAe,GAAIJ,KAAD,KAAY;AAClCK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAEN,KAAK,CAACM,KADL;AAERH,IAAAA,MAAM,EAAEH,KAAK,CAACG;AAFN;AADwB,CAAZ,CAAxB;;AAOA,MAAMI,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLX,IAAAA,aAAa,EAAGY,OAAD,IAAaD,QAAQ,CAACd,YAAY,CAACgB,GAAb,CAAiBD,OAAjB,CAAD,CAD/B;AAELX,IAAAA,mBAAmB,EAAGW,OAAD,IAAaD,QAAQ,CAACd,YAAY,CAACiB,MAAb,CAAoBF,OAApB,CAAD,CAFrC;AAGLV,IAAAA,iBAAiB,EAAE,MAAMS,QAAQ,CAACd,YAAY,CAACkB,UAAb,EAAD,CAH5B;AAILC,IAAAA,WAAW,EAAE,MAAML,QAAQ,CAACb,aAAa,CAACmB,KAAd,EAAD,CAJtB;AAKLC,IAAAA,SAAS,EAAGC,IAAD,IAAUR,QAAQ,CAACb,aAAa,CAACsB,GAAd,CAAkBD,IAAlB,CAAD;AALxB,GAAP;AAOD,CARD;;AAUA,eAAevB,OAAO,CAACW,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CX,GAA7C,CAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport Form from './components/Form/Form';\nimport Contacts from './components/Contacts/Contacts';\nimport Filter from './components/Filter/Filter';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { v4 as uuidv4 } from 'uuid';\nimport { StyledApp, StyledBanner } from './components/AppComponents/AppComponents';\nimport { connect } from 'react-redux';\nimport * as itemsActions from './redux/items/items-actions';\nimport * as filterActions from './redux/filter/filter-actions';\n\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App({ addNewContact, removeSingleContact, removeAllContacts, state }) {\n  // const [contacts, setContacts] = useState([]);\n  // const [filter, setFilter] = useState('');\n\n  //#region class methods\n  // useEffect(() => {\n  //   const contactsFromLocalStorage = JSON.parse(localStorage.getItem('contacts'));\n\n  //   // if (contactsFromLocalStorage) {\n  //   //   setContacts([...contactsFromLocalStorage]);\n  //   // }\n  // }, []);\n\n  // useEffect(() => {\n  //   localStorage.setItem('contacts', JSON.stringify(items));\n  // }, [items]);\n\n  // const isNameInContacts = (searchName) => {\n  //   return contacts.find(({ name }) => name === searchName);\n  // };\n\n  // const isContactAdded = (bool) => bool;\n\n  // const addContact = (name, number) => {\n  //   if (isNameInContacts(name)) {\n  //     const existContactMessage = (name) => toast.warn(`There is an existing contact with name \"${name}\"!`);\n  //     existContactMessage(name);\n\n  //     return isContactAdded(false);\n  //   }\n\n  //   const id = uuidv4();\n\n  //   setContacts([...contacts, { id, name, number }]);\n\n  //   const addedContactMessage = (name) => toast.success(`New contact \"${name}\" was added!`);\n  //   addedContactMessage(name);\n\n  //   return isContactAdded(true);\n  // };\n\n  // const deleteContact = (event) => {\n  //   const id = event.target.value;\n\n  //   setFilter('');\n  //   setContacts((contacts) => contacts.filter((contact) => contact.id !== id));\n  // };\n\n  // const filterContacts = () => {\n  //   if (filter === '') {\n  //     return contacts;\n  //   }\n\n  //   const searchStr = filter.toLowerCase();\n\n  //   return contacts.filter((contact) => contact.name.toLowerCase().includes(searchStr));\n  // };\n  //       /* onFilterChange= {(e) => setFilter(e.target.value)} */\n\n  //disabled={items.length ? false : true}\n\n  //#endregion\n\n  console.log('state ', state);\n\n  return (\n    <StyledApp>\n      <Form onNewContactAdd={addNewContact}></Form>\n      <Filter value={filter} />\n\n      {/* {items.length === 0 ? (\n        <StyledBanner>No contacts...</StyledBanner>\n      ) : (\n        <Contacts deleteContact={removeSingleContact} deleteAll={removeAllContacts} />\n      )} */}\n      <ToastContainer />\n    </StyledApp>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: {\n    items: state.items,\n    filter: state.filter,\n  },\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addNewContact: (contact) => dispatch(itemsActions.ADD(contact)),\n    removeSingleContact: (contact) => dispatch(itemsActions.REMOVE(contact)),\n    removeAllContacts: () => dispatch(itemsActions.REMOVE_ALL()),\n    clearFilter: () => dispatch(filterActions.CLEAR()),\n    setFilter: (text) => dispatch(filterActions.SET(text)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}