{"ast":null,"code":"var _jsxFileName = \"/home/hennadiy/Documents/Projects/goit-react-hw-06-phonebook/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Form from './components/Form/Form';\nimport Contacts from './components/Contacts/Contacts';\nimport Filter from './components/Filter/Filter';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { v4 as uuidv4 } from 'uuid';\nimport { StyledApp, StyledBanner } from './components/AppComponents/AppComponents';\nimport { connect } from 'react-redux';\nimport * as itemsActions from './redux/items/items-actions';\nimport * as filterActions from './redux/filter/filter-actions';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App({\n  contacts: {\n    items,\n    filter\n  },\n  addMultiplyContacts\n}) {\n  _s();\n\n  // const [contacts, setContacts] = useState([]);\n  // const [filter, setFilter] = useState('');\n  //#region class methods\n  useEffect(() => {\n    const contactsFromLocalStorage = JSON.parse(localStorage.getItem('contacts'));\n\n    if (contactsFromLocalStorage) {\n      addMultiplyContacts(contactsFromLocalStorage);\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(items));\n  }, [items]); // const isNameInContacts = (searchName) => {\n  //   return contacts.find(({ name }) => name === searchName);\n  // };\n  // const isContactAdded = (bool) => bool;\n  // const addContact = (name, number) => {\n  //   if (isNameInContacts(name)) {\n  //     const existContactMessage = (name) => toast.warn(`There is an existing contact with name \"${name}\"!`);\n  //     existContactMessage(name);\n  //     return isContactAdded(false);\n  //   }\n  //   const id = uuidv4();\n  //   setContacts([...contacts, { id, name, number }]);\n  //   const addedContactMessage = (name) => toast.success(`New contact \"${name}\" was added!`);\n  //   addedContactMessage(name);\n  //   return isContactAdded(true);\n  // };\n  // const deleteContact = (event) => {\n  //   const id = event.target.value;\n  //   setFilter('');\n  //   setContacts((contacts) => contacts.filter((contact) => contact.id !== id));\n  // };\n  // const filterContacts = () => {\n  //   if (filter === '') {\n  //     return contacts;\n  //   }\n  //   const searchStr = filter.toLowerCase();\n  //   return contacts.filter((contact) => contact.name.toLowerCase().includes(searchStr));\n  // };\n  //       /* onFilterChange= {(e) => setFilter(e.target.value)} */\n  //disabled={items.length ? false : true}\n  //onNewContactAdd={addNewContact}\n  //#endregion\n  // console.log('props ', props);\n\n  return /*#__PURE__*/_jsxDEV(StyledApp, {\n    children: [/*#__PURE__*/_jsxDEV(Form, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Filter, {\n      value: filter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), items.length === 0 ? /*#__PURE__*/_jsxDEV(StyledBanner, {\n      children: \"No contacts...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 29\n    }, this) : /*#__PURE__*/_jsxDEV(Contacts, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 75\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n\n_c = App;\n\nconst mapStateToProps = state => ({\n  contacts: {\n    items: state.contacts.items,\n    filter: state.contacts.filter\n  }\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addNewContact: contact => dispatch(itemsActions.ADD(contact)),\n    addMultiplyContacts: contactsList => dispatch(itemsActions.ADD_MUTIPLY_CONTACTS(contactsList)),\n    removeSingleContact: contact => dispatch(itemsActions.REMOVE(contact)),\n    removeAllContacts: () => dispatch(itemsActions.REMOVE_ALL()),\n    clearFilter: () => dispatch(filterActions.CLEAR()),\n    setFilter: text => dispatch(filterActions.SET(text))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/hennadiy/Documents/Projects/goit-react-hw-06-phonebook/src/App.js"],"names":["useState","useEffect","Form","Contacts","Filter","ToastContainer","toast","v4","uuidv4","StyledApp","StyledBanner","connect","itemsActions","filterActions","App","contacts","items","filter","addMultiplyContacts","contactsFromLocalStorage","JSON","parse","localStorage","getItem","setItem","stringify","length","mapStateToProps","state","mapDispatchToProps","dispatch","addNewContact","contact","ADD","contactsList","ADD_MUTIPLY_CONTACTS","removeSingleContact","REMOVE","removeAllContacts","REMOVE_ALL","clearFilter","CLEAR","setFilter","text","SET"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport Form from './components/Form/Form';\nimport Contacts from './components/Contacts/Contacts';\nimport Filter from './components/Filter/Filter';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { v4 as uuidv4 } from 'uuid';\nimport { StyledApp, StyledBanner } from './components/AppComponents/AppComponents';\nimport { connect } from 'react-redux';\nimport * as itemsActions from './redux/items/items-actions';\nimport * as filterActions from './redux/filter/filter-actions';\n\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App({ contacts: { items, filter }, addMultiplyContacts }) {\n  // const [contacts, setContacts] = useState([]);\n  // const [filter, setFilter] = useState('');\n\n  //#region class methods\n  useEffect(() => {\n    const contactsFromLocalStorage = JSON.parse(localStorage.getItem('contacts'));\n\n    if (contactsFromLocalStorage) {\n      addMultiplyContacts(contactsFromLocalStorage);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(items));\n  }, [items]);\n\n  // const isNameInContacts = (searchName) => {\n  //   return contacts.find(({ name }) => name === searchName);\n  // };\n\n  // const isContactAdded = (bool) => bool;\n\n  // const addContact = (name, number) => {\n  //   if (isNameInContacts(name)) {\n  //     const existContactMessage = (name) => toast.warn(`There is an existing contact with name \"${name}\"!`);\n  //     existContactMessage(name);\n\n  //     return isContactAdded(false);\n  //   }\n\n  //   const id = uuidv4();\n\n  //   setContacts([...contacts, { id, name, number }]);\n\n  //   const addedContactMessage = (name) => toast.success(`New contact \"${name}\" was added!`);\n  //   addedContactMessage(name);\n\n  //   return isContactAdded(true);\n  // };\n\n  // const deleteContact = (event) => {\n  //   const id = event.target.value;\n\n  //   setFilter('');\n  //   setContacts((contacts) => contacts.filter((contact) => contact.id !== id));\n  // };\n\n  // const filterContacts = () => {\n  //   if (filter === '') {\n  //     return contacts;\n  //   }\n\n  //   const searchStr = filter.toLowerCase();\n\n  //   return contacts.filter((contact) => contact.name.toLowerCase().includes(searchStr));\n  // };\n  //       /* onFilterChange= {(e) => setFilter(e.target.value)} */\n\n  //disabled={items.length ? false : true}\n  //onNewContactAdd={addNewContact}\n\n  //#endregion\n\n  // console.log('props ', props);\n\n  return (\n    <StyledApp>\n      <Form></Form>\n      <Filter value={filter} />\n\n      {items.length === 0 ? <StyledBanner>No contacts...</StyledBanner> : <Contacts />}\n      <ToastContainer />\n    </StyledApp>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: {\n    items: state.contacts.items,\n    filter: state.contacts.filter,\n  },\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addNewContact: (contact) => dispatch(itemsActions.ADD(contact)),\n    addMultiplyContacts: (contactsList) => dispatch(itemsActions.ADD_MUTIPLY_CONTACTS(contactsList)),\n    removeSingleContact: (contact) => dispatch(itemsActions.REMOVE(contact)),\n    removeAllContacts: () => dispatch(itemsActions.REMOVE_ALL()),\n    clearFilter: () => dispatch(filterActions.CLEAR()),\n    setFilter: (text) => dispatch(filterActions.SET(text)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}