{"ast":null,"code":"var _jsxFileName = \"/home/hennadiy/Documents/Projects/goit-react-hw-06-phonebook/src/components/Form/Form.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { StyledForm, StyledTitle, StyledLable, StyledInput, StyledButton as StyledPrimaryButton } from './StyledFormComponents';\nimport { connect } from 'react-redux';\nimport * as itemsAction from '../../redux/items/items-actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst useInput = input => {\n  _s();\n\n  const [value, setValue] = useState(() => '');\n  useEffect(() => {\n    function isValidInput(input) {\n      if (!input.value.match(input.pattern) && input.value.length) return false;\n      return true;\n    }\n\n    if (!isValidInput(input.current)) {\n      input.current.style = 'background-color: #f7d7d7;';\n    } else {\n      input.current.style = 'background-color: transparent;';\n    }\n  }, [value, input]);\n  return [value, setValue];\n};\n\n_s(useInput, \"8HeJvIV78owVRv5SXj41IUKPEtM=\");\n\nfunction Form({\n  onNewContactAdd\n}) {\n  _s2();\n\n  const nameInput = useRef();\n  const numberInput = useRef();\n  const [name, setName] = useInput(nameInput);\n  const [number, setNumber] = useInput(numberInput); //#region class methods\n\n  const onInputChange = event => {\n    switch (event.target.name) {\n      case 'name':\n        setName(event.target.value);\n        break;\n\n      case 'number':\n        setNumber(event.target.value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const clearInputs = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const submitNewContact = event => {\n    event.preventDefault();\n    const isContactAdded = onNewContactAdd(name, number);\n\n    if (isContactAdded) {\n      clearInputs();\n    }\n  }; //#endregion\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(StyledTitle, {\n      children: \"Phonebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledForm, {\n      onSubmit: submitNewContact,\n      children: [/*#__PURE__*/_jsxDEV(StyledLable, {\n        children: [\"Name\", /*#__PURE__*/_jsxDEV(StyledInput, {\n          type: \"text\",\n          name: \"name\",\n          pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n          title: \"\\u0418\\u043C\\u044F \\u043C\\u043E\\u0436\\u0435\\u0442 \\u0441\\u043E\\u0441\\u0442\\u043E\\u044F\\u0442\\u044C \\u0442\\u043E\\u043B\\u044C\\u043A\\u043E \\u0438\\u0437 \\u0431\\u0443\\u043A\\u0432, \\u0430\\u043F\\u043E\\u0441\\u0442\\u0440\\u043E\\u0444\\u0430, \\u0442\\u0438\\u0440\\u0435 \\u0438 \\u043F\\u0440\\u043E\\u0431\\u0435\\u043B\\u043E\\u0432. \\u041D\\u0430\\u043F\\u0440\\u0438\\u043C\\u0435\\u0440 Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan \\u0438 \\u0442. \\u043F.\",\n          placeholder: \"Please, type contact name\",\n          required: true,\n          value: name,\n          ref: nameInput,\n          onChange: onInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledLable, {\n        children: [\"Number\", /*#__PURE__*/_jsxDEV(StyledInput, {\n          type: \"tel\",\n          name: \"number\",\n          pattern: \"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\",\n          title: \"\\u041D\\u043E\\u043C\\u0435\\u0440 \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\\u0430 \\u0434\\u043E\\u043B\\u0436\\u0435\\u043D \\u0441\\u043E\\u0441\\u0442\\u043E\\u044F\\u0442\\u044C \\u0446\\u0438\\u0444\\u0440 \\u0438 \\u043C\\u043E\\u0436\\u0435\\u0442 \\u0441\\u043E\\u0434\\u0435\\u0440\\u0436\\u0430\\u0442\\u044C \\u043F\\u0440\\u043E\\u0431\\u0435\\u043B\\u044B, \\u0442\\u0438\\u0440\\u0435, \\u043A\\u0440\\u0443\\u0433\\u043B\\u044B\\u0435 \\u0441\\u043A\\u043E\\u0431\\u043A\\u0438 \\u0438 \\u043C\\u043E\\u0436\\u0435\\u0442 \\u043D\\u0430\\u0447\\u0438\\u043D\\u0430\\u0442\\u044C\\u0441\\u044F \\u0441 +\",\n          placeholder: \"Please, type contact number\",\n          required: true,\n          value: number,\n          ref: numberInput,\n          onChange: onInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledPrimaryButton, {\n        type: \"submit\",\n        children: \"Add contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s2(Form, \"fVRtFbP+3Ud+026b7TfA8HvhooU=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = Form;\nForm.propTypes = {\n  onNewContactAdd: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  contacts: {\n    items: state.contacts.items,\n    filter: state.contacts.filter\n  }\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onNewContactAdd: (name, number) => dispatch(itemsAction.ADD(name, number))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/home/hennadiy/Documents/Projects/goit-react-hw-06-phonebook/src/components/Form/Form.jsx"],"names":["React","useEffect","useState","useRef","PropTypes","StyledForm","StyledTitle","StyledLable","StyledInput","StyledButton","StyledPrimaryButton","connect","itemsAction","useInput","input","value","setValue","isValidInput","match","pattern","length","current","style","Form","onNewContactAdd","nameInput","numberInput","name","setName","number","setNumber","onInputChange","event","target","clearInputs","submitNewContact","preventDefault","isContactAdded","propTypes","func","mapStateToProps","state","contacts","items","filter","mapDispatchToProps","dispatch","ADD"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  StyledForm,\n  StyledTitle,\n  StyledLable,\n  StyledInput,\n  StyledButton as StyledPrimaryButton,\n} from './StyledFormComponents';\nimport { connect } from 'react-redux';\nimport * as itemsAction from '../../redux/items/items-actions';\n\nconst useInput = (input) => {\n  const [value, setValue] = useState(() => '');\n\n  useEffect(() => {\n    function isValidInput(input) {\n      if (!input.value.match(input.pattern) && input.value.length) return false;\n\n      return true;\n    }\n\n    if (!isValidInput(input.current)) {\n      input.current.style = 'background-color: #f7d7d7;';\n    } else {\n      input.current.style = 'background-color: transparent;';\n    }\n  }, [value, input]);\n\n  return [value, setValue];\n};\n\nfunction Form({ onNewContactAdd }) {\n  const nameInput = useRef();\n  const numberInput = useRef();\n\n  const [name, setName] = useInput(nameInput);\n  const [number, setNumber] = useInput(numberInput);\n\n  //#region class methods\n\n  const onInputChange = (event) => {\n    switch (event.target.name) {\n      case 'name':\n        setName(event.target.value);\n        break;\n      case 'number':\n        setNumber(event.target.value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const clearInputs = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const submitNewContact = (event) => {\n    event.preventDefault();\n\n    const isContactAdded = onNewContactAdd(name, number);\n\n    if (isContactAdded) {\n      clearInputs();\n    }\n  };\n\n  //#endregion\n\n  return (\n    <>\n      <StyledTitle>Phonebook</StyledTitle>\n      <StyledForm onSubmit={submitNewContact}>\n        <StyledLable>\n          Name\n          <StyledInput\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            placeholder=\"Please, type contact name\"\n            required\n            value={name}\n            ref={nameInput}\n            onChange={onInputChange}\n          />\n        </StyledLable>\n        <StyledLable>\n          Number\n          <StyledInput\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            placeholder=\"Please, type contact number\"\n            required\n            value={number}\n            ref={numberInput}\n            onChange={onInputChange}\n          />\n        </StyledLable>\n        <StyledPrimaryButton type=\"submit\">Add contact</StyledPrimaryButton>\n      </StyledForm>\n    </>\n  );\n}\n\nForm.propTypes = {\n  onNewContactAdd: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n  contacts: {\n    items: state.contacts.items,\n    filter: state.contacts.filter,\n  },\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onNewContactAdd: (name, number) => dispatch(itemsAction.ADD(name, number)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n"]},"metadata":{},"sourceType":"module"}