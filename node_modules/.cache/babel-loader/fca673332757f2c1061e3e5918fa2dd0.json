{"ast":null,"code":"var _jsxFileName = \"/home/hennadiy/Documents/Projects/goit-react-hw-06-phonebook/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Form from './components/Form/Form';\nimport Contacts from './components/Contacts/Contacts';\nimport Filter from './components/Filter/Filter';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { v4 as uuidv4 } from 'uuid';\nimport { StyledApp, StyledBanner } from './components/AppComponents/AppComponents';\nimport { connect } from 'react-redux';\nimport * as itemsActions from './redux/items/items-actions';\nimport * as filterActions from './redux/filter/filter-actions';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App({\n  items,\n  filterd\n}) {\n  _s();\n\n  const [contacts, setContacts] = useState([]);\n  const [filter, setFilter] = useState(''); //#region class methods\n\n  useEffect(() => {\n    const contactsFromLocalStorage = JSON.parse(localStorage.getItem('contacts'));\n\n    if (contactsFromLocalStorage) {\n      setContacts([...contactsFromLocalStorage]);\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const isNameInContacts = searchName => {\n    return contacts.find(({\n      name\n    }) => name === searchName);\n  };\n\n  const isContactAdded = bool => bool;\n\n  const addContact = (name, number) => {\n    if (isNameInContacts(name)) {\n      const existContactMessage = name => toast.warn(`There is an existing contact with name \"${name}\"!`);\n\n      existContactMessage(name);\n      return isContactAdded(false);\n    }\n\n    const id = uuidv4();\n    setContacts([...contacts, {\n      id,\n      name,\n      number\n    }]);\n\n    const addedContactMessage = name => toast.success(`New contact \"${name}\" was added!`);\n\n    addedContactMessage(name);\n    return isContactAdded(true);\n  };\n\n  const deleteContact = event => {\n    const id = event.target.value;\n    setFilter('');\n    setContacts(contacts => contacts.filter(contact => contact.id !== id));\n  };\n\n  const filterContacts = () => {\n    if (filter === '') {\n      return contacts;\n    }\n\n    const searchStr = filter.toLowerCase();\n    return contacts.filter(contact => contact.name.toLowerCase().includes(searchStr));\n  }; //#endregion\n\n\n  return /*#__PURE__*/_jsxDEV(StyledApp, {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      onNewContactAdd: addContact\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Filter, {\n      onFilterChange: e => setFilter(e.target.value),\n      value: filter,\n      disabled: contacts.length ? false : true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), contacts.length === 0 ? /*#__PURE__*/_jsxDEV(StyledBanner, {\n      children: \"No contacts...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Contacts, {\n      contacts: filterContacts(),\n      deleteContact: deleteContact,\n      deleteAll: () => setContacts([])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"egG9UneZTJXjVaFcP/nudS6P+io=\");\n\n_c = App;\n\nconst mapStateToProps = state => {\n  return {\n    items: state.contacts.items,\n    filter: state.contacts.filter\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addContact: contact => dispatch()\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/hennadiy/Documents/Projects/goit-react-hw-06-phonebook/src/App.js"],"names":["useState","useEffect","Form","Contacts","Filter","ToastContainer","toast","v4","uuidv4","StyledApp","StyledBanner","connect","itemsActions","filterActions","App","items","filterd","contacts","setContacts","filter","setFilter","contactsFromLocalStorage","JSON","parse","localStorage","getItem","setItem","stringify","isNameInContacts","searchName","find","name","isContactAdded","bool","addContact","number","existContactMessage","warn","id","addedContactMessage","success","deleteContact","event","target","value","contact","filterContacts","searchStr","toLowerCase","includes","e","length","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport Form from './components/Form/Form';\nimport Contacts from './components/Contacts/Contacts';\nimport Filter from './components/Filter/Filter';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { v4 as uuidv4 } from 'uuid';\nimport { StyledApp, StyledBanner } from './components/AppComponents/AppComponents';\nimport { connect } from 'react-redux';\nimport * as itemsActions from './redux/items/items-actions';\nimport * as filterActions from './redux/filter/filter-actions';\n\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App({ items, filterd }) {\n  const [contacts, setContacts] = useState([]);\n  const [filter, setFilter] = useState('');\n\n  //#region class methods\n  useEffect(() => {\n    const contactsFromLocalStorage = JSON.parse(localStorage.getItem('contacts'));\n\n    if (contactsFromLocalStorage) {\n      setContacts([...contactsFromLocalStorage]);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const isNameInContacts = (searchName) => {\n    return contacts.find(({ name }) => name === searchName);\n  };\n\n  const isContactAdded = (bool) => bool;\n\n  const addContact = (name, number) => {\n    if (isNameInContacts(name)) {\n      const existContactMessage = (name) => toast.warn(`There is an existing contact with name \"${name}\"!`);\n      existContactMessage(name);\n\n      return isContactAdded(false);\n    }\n\n    const id = uuidv4();\n\n    setContacts([...contacts, { id, name, number }]);\n\n    const addedContactMessage = (name) => toast.success(`New contact \"${name}\" was added!`);\n    addedContactMessage(name);\n\n    return isContactAdded(true);\n  };\n\n  const deleteContact = (event) => {\n    const id = event.target.value;\n\n    setFilter('');\n    setContacts((contacts) => contacts.filter((contact) => contact.id !== id));\n  };\n\n  const filterContacts = () => {\n    if (filter === '') {\n      return contacts;\n    }\n\n    const searchStr = filter.toLowerCase();\n\n    return contacts.filter((contact) => contact.name.toLowerCase().includes(searchStr));\n  };\n\n  //#endregion\n  return (\n    <StyledApp>\n      <Form onNewContactAdd={addContact}></Form>\n      <Filter\n        onFilterChange={(e) => setFilter(e.target.value)}\n        value={filter}\n        disabled={contacts.length ? false : true}\n      />\n      {contacts.length === 0 ? (\n        <StyledBanner>No contacts...</StyledBanner>\n      ) : (\n        <Contacts contacts={filterContacts()} deleteContact={deleteContact} deleteAll={() => setContacts([])} />\n      )}\n      <ToastContainer />\n    </StyledApp>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    items: state.contacts.items,\n    filter: state.contacts.filter,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addContact: (contact) => dispatch(),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}