{"ast":null,"code":"var _jsxFileName = \"/home/hennadiy/Documents/Projects/goit-react-hw-06-phonebook/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Form from './components/Form/Form';\nimport Contacts from './components/Contacts/Contacts';\nimport Filter from './components/Filter/Filter';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { v4 as uuidv4 } from 'uuid';\nimport { StyledApp, StyledBanner } from './components/AppComponents/AppComponents';\nimport { connect } from 'react-redux';\nimport * as itemsActions from './redux/items/items-actions';\nimport * as filterActions from './redux/filter/filter-actions';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App({\n  addNewContact,\n  removeSingleContact,\n  removeAllContacts,\n  items,\n  filter\n}) {\n  _s();\n\n  // const [contacts, setContacts] = useState([]);\n  // const [filter, setFilter] = useState('');\n  //#region class methods\n  useEffect(() => {\n    const contactsFromLocalStorage = JSON.parse(localStorage.getItem('contacts')); // if (contactsFromLocalStorage) {\n    //   setContacts([...contactsFromLocalStorage]);\n    // }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(items));\n  }, [items]); // const isNameInContacts = (searchName) => {\n  //   return contacts.find(({ name }) => name === searchName);\n  // };\n  // const isContactAdded = (bool) => bool;\n  // const addContact = (name, number) => {\n  //   if (isNameInContacts(name)) {\n  //     const existContactMessage = (name) => toast.warn(`There is an existing contact with name \"${name}\"!`);\n  //     existContactMessage(name);\n  //     return isContactAdded(false);\n  //   }\n  //   const id = uuidv4();\n  //   setContacts([...contacts, { id, name, number }]);\n  //   const addedContactMessage = (name) => toast.success(`New contact \"${name}\" was added!`);\n  //   addedContactMessage(name);\n  //   return isContactAdded(true);\n  // };\n  // const deleteContact = (event) => {\n  //   const id = event.target.value;\n  //   setFilter('');\n  //   setContacts((contacts) => contacts.filter((contact) => contact.id !== id));\n  // };\n  // const filterContacts = () => {\n  //   if (filter === '') {\n  //     return contacts;\n  //   }\n  //   const searchStr = filter.toLowerCase();\n  //   return contacts.filter((contact) => contact.name.toLowerCase().includes(searchStr));\n  // };\n  //#endregion\n\n  return /*#__PURE__*/_jsxDEV(StyledApp, {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      onNewContactAdd: addNewContact\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Filter, {\n      onFilterChange: e => setFilter(e.target.value),\n      value: filter,\n      disabled: items.length ? false : true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), contacts.length === 0 ? /*#__PURE__*/_jsxDEV(StyledBanner, {\n      children: \"No contacts...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Contacts, {\n      contacts: items,\n      deleteContact: removeSingleContact,\n      deleteAll: removeAllContacts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n\n_c = App;\n\nconst mapStateToProps = state => {\n  var _state$contacts, _state$contacts2;\n\n  console.log(state);\n  return {\n    contacts: {\n      items: (_state$contacts = state.contacts) === null || _state$contacts === void 0 ? void 0 : _state$contacts.items,\n      filter: (_state$contacts2 = state.contacts) === null || _state$contacts2 === void 0 ? void 0 : _state$contacts2.filter\n    }\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addNewContact: contact => dispatch(itemsActions.ADD(contact)),\n    removeSingleContact: contact => dispatch(itemsActions.REMOVE(contact)),\n    removeAllContacts: () => dispatch(itemsActions.REMOVE_ALL()),\n    clearFilter: () => dispatch(filterActions.CLEAR()),\n    setFilter: text => dispatch(filterActions.SET(text))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/hennadiy/Documents/Projects/goit-react-hw-06-phonebook/src/App.js"],"names":["useState","useEffect","Form","Contacts","Filter","ToastContainer","toast","v4","uuidv4","StyledApp","StyledBanner","connect","itemsActions","filterActions","App","addNewContact","removeSingleContact","removeAllContacts","items","filter","contactsFromLocalStorage","JSON","parse","localStorage","getItem","setItem","stringify","e","setFilter","target","value","length","contacts","mapStateToProps","state","console","log","mapDispatchToProps","dispatch","contact","ADD","REMOVE","REMOVE_ALL","clearFilter","CLEAR","text","SET"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport Form from './components/Form/Form';\nimport Contacts from './components/Contacts/Contacts';\nimport Filter from './components/Filter/Filter';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { v4 as uuidv4 } from 'uuid';\nimport { StyledApp, StyledBanner } from './components/AppComponents/AppComponents';\nimport { connect } from 'react-redux';\nimport * as itemsActions from './redux/items/items-actions';\nimport * as filterActions from './redux/filter/filter-actions';\n\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App({ addNewContact, removeSingleContact, removeAllContacts, items, filter }) {\n  // const [contacts, setContacts] = useState([]);\n  // const [filter, setFilter] = useState('');\n\n  //#region class methods\n  useEffect(() => {\n    const contactsFromLocalStorage = JSON.parse(localStorage.getItem('contacts'));\n\n    // if (contactsFromLocalStorage) {\n    //   setContacts([...contactsFromLocalStorage]);\n    // }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(items));\n  }, [items]);\n\n  // const isNameInContacts = (searchName) => {\n  //   return contacts.find(({ name }) => name === searchName);\n  // };\n\n  // const isContactAdded = (bool) => bool;\n\n  // const addContact = (name, number) => {\n  //   if (isNameInContacts(name)) {\n  //     const existContactMessage = (name) => toast.warn(`There is an existing contact with name \"${name}\"!`);\n  //     existContactMessage(name);\n\n  //     return isContactAdded(false);\n  //   }\n\n  //   const id = uuidv4();\n\n  //   setContacts([...contacts, { id, name, number }]);\n\n  //   const addedContactMessage = (name) => toast.success(`New contact \"${name}\" was added!`);\n  //   addedContactMessage(name);\n\n  //   return isContactAdded(true);\n  // };\n\n  // const deleteContact = (event) => {\n  //   const id = event.target.value;\n\n  //   setFilter('');\n  //   setContacts((contacts) => contacts.filter((contact) => contact.id !== id));\n  // };\n\n  // const filterContacts = () => {\n  //   if (filter === '') {\n  //     return contacts;\n  //   }\n\n  //   const searchStr = filter.toLowerCase();\n\n  //   return contacts.filter((contact) => contact.name.toLowerCase().includes(searchStr));\n  // };\n\n  //#endregion\n  return (\n    <StyledApp>\n      <Form onNewContactAdd={addNewContact}></Form>\n      <Filter onFilterChange={(e) => setFilter(e.target.value)} value={filter} disabled={items.length ? false : true} />\n      {contacts.length === 0 ? (\n        <StyledBanner>No contacts...</StyledBanner>\n      ) : (\n        <Contacts contacts={items} deleteContact={removeSingleContact} deleteAll={removeAllContacts} />\n      )}\n      <ToastContainer />\n    </StyledApp>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  console.log(state);\n\n  return {\n    contacts: {\n      items: state.contacts?.items,\n      filter: state.contacts?.filter,\n    },\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addNewContact: (contact) => dispatch(itemsActions.ADD(contact)),\n    removeSingleContact: (contact) => dispatch(itemsActions.REMOVE(contact)),\n    removeAllContacts: () => dispatch(itemsActions.REMOVE_ALL()),\n    clearFilter: () => dispatch(filterActions.CLEAR()),\n    setFilter: (text) => dispatch(filterActions.SET(text)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}